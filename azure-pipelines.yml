# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: 
  - main

pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: TerraformTaskV4@4
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/gweb/Kubcluster_files/dev.tfvars'
      backendServiceArm: 'azure_connection'
      backendAzureRmResourceGroupName: 'ap_rg1'
      backendAzureRmStorageAccountName: 'terraform524'
      backendAzureRmContainerName: 'container52'
      backendAzureRmKey: 'terraform_dev.tfstate'

  - task: TerraformTaskV4@4
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/gweb/Kubcluster_files/dev.tfvars'
      environmentServiceNameAzureRM: 'azure_connection'

  - task: TerraformTaskV4@4
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/gweb/Kubcluster_files/prod.tfvars'
      backendServiceArm: 'azure_connection'
      backendAzureRmResourceGroupName: 'ap_rg1'
      backendAzureRmStorageAccountName: 'terraform524'
      backendAzureRmContainerName: 'container52'
      backendAzureRmKey: 'terraform_prod.tfstate'

  - task: TerraformTaskV4@4
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/gweb/Kubcluster_files/prod.tfvars'
      environmentServiceNameAzureRM: 'azure_connection'
